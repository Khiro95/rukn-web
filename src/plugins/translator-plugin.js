const HtmlWebpackPlugin = require('html-webpack-plugin');
const staticI18n = require('static-i18n');
const path = require('path');

const PLUGIN_NAME = 'TranslatorPlugin';

const defaultOptions = {
  hwpOptions: {
    template: 'src/index.html',
    filename: 'temp--translator_plugin'
  },
  i18nOptions: {
    locale: 'en',
    locales: ['en'],
    localesPath: 'src/locales',
  }
}

class TranslatorPlugin {
  constructor(options) {
    this.options = Object.assign({}, defaultOptions, options);
    this.options.i18nOptions = Object.assign({}, defaultOptions.i18nOptions, options.i18nOptions);
    this.options.hwpOptions = Object.assign({}, defaultOptions.hwpOptions, options.hwpOptions);

    const hwpIndexPath = require.resolve('html-webpack-plugin');
    const hwpLoader = path.resolve(path.dirname(hwpIndexPath), 'lib/loader');

    this.options.hwpOptions.template = hwpLoader + '?force=true!' + this.options.hwpOptions.template;
  }

  apply (compiler) {
    const i18nOptions = this.options.i18nOptions;
    if (i18nOptions.locales && i18nOptions.locales.length) {
      new HtmlWebpackPlugin(this.options.hwpOptions).apply(compiler);
    }

    compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation) => {
      console.log('The compiler is starting a new compilation...')

      HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync(
        PLUGIN_NAME, // <-- Set a meaningful name here for stacktraces
        (data, cb) => {
          // NOTE: processing raw html prevent fixing css/js relative paths, so we emit files in outputDir (not in subfolder)
          staticI18n.process(data.html, i18nOptions).then(result => {
            if (result) {
              for (let lang in result) {
                compilation.emitAsset(lang + '.index.html', new compiler.webpack.sources.RawSource(result[lang], false), {lang});
              }
            }
            // Tell webpack to move on
            cb(null, data)
          });
        }
      );

      HtmlWebpackPlugin.getHooks(compilation).afterEmit.tapAsync(PLUGIN_NAME, (data, cb) => {
        // The html asset generated by HtmlWebpackPlugin isn't translated so we remove it since it's not used
        compilation.deleteAsset(data.outputName);
        cb(null, data);
      });
    });
  }
}

module.exports = TranslatorPlugin